{
	"info": {
		"_postman_id": "4562a789-9ab6-47d5-b8dc-54aab505d3a2",
		"name": "Product API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10048771"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each product has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.forEach(function(product) {",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('description');",
							"        pm.expect(product).to.have.property('price');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product (Success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Product is created with correct data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal(pm.variables.get(\"productName\"));",
							"    pm.expect(jsonData.description).to.equal(\"Test product description\");",
							"    pm.expect(jsonData.price).to.equal(9.99);",
							"});",
							"",
							"pm.collectionVariables.set(\"createdProductId\", Number(pm.response.json().id));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"productName\", \"Test Product \" + + Date.now());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{productName}}\",\n    \"description\": \"Test product description\",\n    \"price\": 9.99\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID (Success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData).to.have.property('price');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/{{createdProductId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"{{createdProductId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID (Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error response is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('PRODUCT_NOT_FOUND');",
							"    pm.expect(jsonData.message).to.include('Product not found with id:');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"1000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product (Duplicate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error response is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('DUPLICATE_PRODUCT');",
							"    pm.expect(jsonData.message).to.include('Product with name');",
							"    pm.expect(jsonData.message).to.include('already exists');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"productName\", \"Test Product\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{productName}}\",\n    \"description\": \"Duplicate product description\",\n    \"price\": 19.99\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product (Success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product is updated with correct data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal(pm.variables.get(\"updatedProductName\"));",
							"    pm.expect(jsonData.description).to.equal(\"Updated product description\");",
							"    pm.expect(jsonData.price).to.equal(19.99);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"updatedProductName\", \"Updated Product\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{updatedProductName}}\",\n    \"description\": \"Updated product description\",\n    \"price\": 19.99\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products/{{createdProductId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"{{createdProductId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product (Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error response is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('PRODUCT_NOT_FOUND');",
							"    pm.expect(jsonData.message).to.include('Product not found with id:');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Non-existent Product\",\n    \"description\": \"This product doesn't exist\",\n    \"price\": 29.99\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products/999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product (Success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/{{createdProductId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"{{createdProductId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product (Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error response is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.equal('PRODUCT_NOT_FOUND');",
							"    pm.expect(jsonData.message).to.include('Product not found with id:');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"999"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "createdProductId",
			"value": "1"
		},
		{
			"key": "id",
			"value": "1",
			"type": "string"
		}
	]
}